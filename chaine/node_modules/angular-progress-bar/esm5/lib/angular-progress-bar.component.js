/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function ProgressBarComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.whichProgress(ctx_r0.progress), "% ");
} }
function ProgressBarComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.whichProgress(ctx_r1.progress), " ");
} }
var ProgressBarComponent = /** @class */ (function () {
    function ProgressBarComponent() {
        // Default color
        this.color = "#488aff";
        this.disabledP = false;
    }
    /**
     * Returns a color for a certain percent
     * @param percent The current progress
     */
    /**
     * Returns a color for a certain percent
     * @param {?} percent The current progress
     * @return {?}
     */
    ProgressBarComponent.prototype.whichColor = /**
     * Returns a color for a certain percent
     * @param {?} percent The current progress
     * @return {?}
     */
    function (percent) {
        var e_1, _a;
        // Get all entries index as an array
        /** @type {?} */
        var k = Object.keys(this.degraded);
        // Convert string to number
        k.forEach(function (e, i) { return k[i] = +e; });
        // Sort them by value
        k = k.sort(function (a, b) { return a - b; });
        // Percent as number
        /** @type {?} */
        var p = +percent
        // Set last by default as the first occurrence
        ;
        // Set last by default as the first occurrence
        /** @type {?} */
        var last = k[0];
        try {
            // Foreach keys 
            for (var k_1 = tslib_1.__values(k), k_1_1 = k_1.next(); !k_1_1.done; k_1_1 = k_1.next()) {
                var val = k_1_1.value;
                // if current val is < than percent
                if (val < p) {
                    last = val;
                }
                // if val >= percent then the val that we could show has been reached
                else if (val >= p - 1) {
                    return this.degraded[last];
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (k_1_1 && !k_1_1.done && (_a = k_1.return)) _a.call(k_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        // if its the last one return the last
        return this.degraded[last];
    };
    /**
     * @param {?} progress
     * @return {?}
     */
    ProgressBarComponent.prototype.whichProgress = /**
     * @param {?} progress
     * @return {?}
     */
    function (progress) {
        try {
            return Math.round(+progress * 100) / 100;
        }
        catch (_a) {
            return progress;
        }
    };
    /** @nocollapse */
    ProgressBarComponent.ctorParameters = function () { return []; };
    ProgressBarComponent.propDecorators = {
        progress: [{ type: Input, args: ['progress',] }],
        color: [{ type: Input, args: ['color',] }],
        degraded: [{ type: Input, args: ['color-degraded',] }],
        disabledP: [{ type: Input, args: ['disable-percentage',] }]
    };
ProgressBarComponent.ɵfac = function ProgressBarComponent_Factory(t) { return new (t || ProgressBarComponent)(); };
ProgressBarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ProgressBarComponent, selectors: [["progress-bar"]], inputs: { color: "color", disabledP: ["disable-percentage", "disabledP"], progress: "progress", degraded: ["color-degraded", "degraded"] }, decls: 4, vars: 6, consts: [[1, "progress-outer"], [1, "progress-inner"], [4, "ngIf"]], template: function ProgressBarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, ProgressBarComponent_ng_container_2_Template, 2, 1, "ng-container", 2);
        ɵngcc0.ɵɵtemplate(3, ProgressBarComponent_ng_container_3_Template, 2, 1, "ng-container", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("width", ctx.whichProgress(ctx.progress) + "%")("background-color", ctx.degraded == null ? ctx.color : ctx.whichColor(ctx.progress));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.disabledP);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.disabledP);
    } }, directives: [ɵngcc1.NgIf], styles: [".progress-outer[_ngcontent-%COMP%] {\n          width: 96%;\n          margin: 10px 2%;\n          padding: 3px;\n          background-color: #f4f4f4;\n          border: 1px solid #dcdcdc;\n          color: #fff;\n          border-radius: 20px;\n          text-align: center;\n        }\n        .progress-inner[_ngcontent-%COMP%] {\n          min-width: 15%;\n          min-height:18px;\n          white-space: nowrap;\n          overflow: hidden;\n          padding: 0px;\n          border-radius: 20px;"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProgressBarComponent, [{
        type: Component,
        args: [{
                selector: 'progress-bar',
                template: "\n  <div class=\"progress-outer\">\n    <div class=\"progress-inner\" [style.width]=\"whichProgress(progress) + '%'\" [style.background-color]=\"degraded == null ? color : whichColor(progress)\">\n      <ng-container *ngIf=\"!disabledP\"> \n        {{whichProgress(progress)}}%\n      </ng-container>\n      <ng-container *ngIf=\"disabledP\"> \n        {{whichProgress(progress)}}\n      </ng-container>\n    </div>\n  </div>\n  ",
                styles: ["\n        .progress-outer {\n          width: 96%;\n          margin: 10px 2%;\n          padding: 3px;\n          background-color: #f4f4f4;\n          border: 1px solid #dcdcdc;\n          color: #fff;\n          border-radius: 20px;\n          text-align: center;\n        }\n        .progress-inner {\n          min-width: 15%;\n          min-height:18px;\n          white-space: nowrap;\n          overflow: hidden;\n          padding: 0px;\n          border-radius: 20px;\n  "]
            }]
    }], function () { return []; }, { color: [{
            type: Input,
            args: ['color']
        }], disabledP: [{
            type: Input,
            args: ['disable-percentage']
        }], progress: [{
            type: Input,
            args: ['progress']
        }], degraded: [{
            type: Input,
            args: ['color-degraded']
        }] }); })();
    return ProgressBarComponent;
}());
export { ProgressBarComponent };
if (false) {
    /**
     * Inputs *
     * @type {?}
     */
    ProgressBarComponent.prototype.progress;
    /** @type {?} */
    ProgressBarComponent.prototype.color;
    /** @type {?} */
    ProgressBarComponent.prototype.degraded;
    /** @type {?} */
    ProgressBarComponent.prototype.disabledP;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1wcm9ncmVzcy1iYXIuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXByb2dyZXNzLWJhci9saWIvYW5ndWxhci1wcm9ncmVzcy1iYXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFakQ7QUFHTyxJQTBDUDtBQUNrQixRQUFoQixnQkFBZ0I7QUFDbEIsUUFBRSxJQUFJLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQztBQUN6QixRQUFFLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0FBQ3pCLElBQUEsQ0FBQztBQUNELElBQ0E7QUFDQTtBQUNJO0FBRUQsT0FEQTtBQUNIO0FBQVM7QUFDZ0I7QUFDUTtBQUMvQjtBQUFTLElBSFgseUNBQVU7QUFBUTtBQUNnQjtBQUNRO0FBQy9CO0FBQVMsSUFIcEIsVUFBVyxPQUFlO0FBQ3pCO0FBQXNCO0FBQ007QUFDekIsWUFERSxDQUFDLEdBQWUsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQ2hELFFBQUUsMkJBQTJCO0FBQzdCLFFBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLENBQUMsRUFBRSxDQUFDLElBQUssT0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQVQsQ0FBUyxDQUFDLENBQUM7QUFDakMsUUFBRSxxQkFBcUI7QUFDdkIsUUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLENBQUMsRUFBRSxDQUFDLElBQUssT0FBQSxDQUFDLEdBQUcsQ0FBQyxFQUFMLENBQUssQ0FBQyxDQUFDO0FBQzlCO0FBQ007QUFDTSxZQUROLENBQUMsR0FBRyxDQUFDLE9BQU87QUFDbEIsUUFBRSw4Q0FBOEM7QUFDaEQ7QUFBVztBQUdOO0FBQTBCLFlBSHpC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QUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBeEZBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBb0JBLEFBQUEsQUFDQSxBQVdBLEFBL0JBLEFBa0JBLEFBY0EsQUFJQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQStDQSxBQUFBLEFBQUEsQUF6RkEsQUF5RkEsQUFyREEsQUFBQSxBQUdBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjpcclxuICAgICAgJ3Byb2dyZXNzLWJhcicsXHJcbiAgc3R5bGVzOiBbYFxyXG4gICAgICAgIC5wcm9ncmVzcy1vdXRlciB7XHJcbiAgICAgICAgICB3aWR0aDogOTYlO1xyXG4gICAgICAgICAgbWFyZ2luOiAxMHB4IDIlO1xyXG4gICAgICAgICAgcGFkZGluZzogM3B4O1xyXG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2Y0ZjRmNDtcclxuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNkY2RjZGM7XHJcbiAgICAgICAgICBjb2xvcjogI2ZmZjtcclxuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDIwcHg7XHJcbiAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC5wcm9ncmVzcy1pbm5lciB7XHJcbiAgICAgICAgICBtaW4td2lkdGg6IDE1JTtcclxuICAgICAgICAgIG1pbi1oZWlnaHQ6MThweDtcclxuICAgICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcbiAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgICAgICAgcGFkZGluZzogMHB4O1xyXG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogMjBweDtcclxuICBgXSxcclxuICB0ZW1wbGF0ZTpcclxuICBgXHJcbiAgPGRpdiBjbGFzcz1cXFwicHJvZ3Jlc3Mtb3V0ZXJcXFwiPlxyXG4gICAgPGRpdiBjbGFzcz1cXFwicHJvZ3Jlc3MtaW5uZXJcXFwiIFtzdHlsZS53aWR0aF09XFxcIndoaWNoUHJvZ3Jlc3MocHJvZ3Jlc3MpICsgJyUnXFxcIiBbc3R5bGUuYmFja2dyb3VuZC1jb2xvcl09XFxcImRlZ3JhZGVkID09IG51bGwgPyBjb2xvciA6IHdoaWNoQ29sb3IocHJvZ3Jlc3MpXFxcIj5cclxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIiFkaXNhYmxlZFBcIj4gXHJcbiAgICAgICAge3t3aGljaFByb2dyZXNzKHByb2dyZXNzKX19JVxyXG4gICAgICA8L25nLWNvbnRhaW5lcj5cclxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImRpc2FibGVkUFwiPiBcclxuICAgICAgICB7e3doaWNoUHJvZ3Jlc3MocHJvZ3Jlc3MpfX1cclxuICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICA8L2Rpdj5cclxuICA8L2Rpdj5cclxuICBgXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQcm9ncmVzc0JhckNvbXBvbmVudCB7XHJcblxyXG4vKiogSW5wdXRzICoqL1xyXG4gIEBJbnB1dCgncHJvZ3Jlc3MnKSBwcm9ncmVzczogc3RyaW5nO1xyXG4gIEBJbnB1dCgnY29sb3InKSBjb2xvcjogc3RyaW5nO1xyXG4gIEBJbnB1dCgnY29sb3ItZGVncmFkZWQnKSBkZWdyYWRlZDogYW55O1xyXG4gIEBJbnB1dCgnZGlzYWJsZS1wZXJjZW50YWdlJykgZGlzYWJsZWRQOiBib29sZWFuO1xyXG5cclxuXHJcbmNvbnN0cnVjdG9yKCkge1xyXG4gIC8vIERlZmF1bHQgY29sb3JcclxuICB0aGlzLmNvbG9yID0gXCIjNDg4YWZmXCI7XHJcbiAgdGhpcy5kaXNhYmxlZFAgPSBmYWxzZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBjb2xvciBmb3IgYSBjZXJ0YWluIHBlcmNlbnRcclxuICogQHBhcmFtIHBlcmNlbnQgVGhlIGN1cnJlbnQgcHJvZ3Jlc3NcclxuICovXHJcbndoaWNoQ29sb3IocGVyY2VudDogc3RyaW5nKXtcclxuICAvLyBHZXQgYWxsIGVudHJpZXMgaW5kZXggYXMgYW4gYXJyYXlcclxuICBsZXQgazogQXJyYXk8YW55PiA9IE9iamVjdC5rZXlzKHRoaXMuZGVncmFkZWQpO1xyXG4gIC8vIENvbnZlcnQgc3RyaW5nIHRvIG51bWJlclxyXG4gIGsuZm9yRWFjaCgoZSwgaSkgPT4ga1tpXSA9ICtlKTtcclxuICAvLyBTb3J0IHRoZW0gYnkgdmFsdWVcclxuICBrID0gay5zb3J0KChhLCBiKSA9PiBhIC0gYik7XHJcbiAgLy8gUGVyY2VudCBhcyBudW1iZXJcclxuICBsZXQgcCA9ICtwZXJjZW50XHJcbiAgLy8gU2V0IGxhc3QgYnkgZGVmYXVsdCBhcyB0aGUgZmlyc3Qgb2NjdXJyZW5jZVxyXG4gIGxldCBsYXN0ID0ga1swXTtcclxuICAvLyBGb3JlYWNoIGtleXMgXHJcbiAgZm9yKGxldCB2YWwgb2Ygayl7XHJcbiAgICAvLyBpZiBjdXJyZW50IHZhbCBpcyA8IHRoYW4gcGVyY2VudFxyXG4gICAgaWYodmFsIDwgcCl7XHJcbiAgICAgIGxhc3QgPSB2YWw7XHJcbiAgICB9XHJcbiAgICAvLyBpZiB2YWwgPj0gcGVyY2VudCB0aGVuIHRoZSB2YWwgdGhhdCB3ZSBjb3VsZCBzaG93IGhhcyBiZWVuIHJlYWNoZWRcclxuICAgIGVsc2UgaWYodmFsID49IHAgLTEpe1xyXG4gICAgICByZXR1cm4gdGhpcy5kZWdyYWRlZFtsYXN0XTtcclxuICAgIH1cclxuICB9XHJcbiAgLy8gaWYgaXRzIHRoZSBsYXN0IG9uZSByZXR1cm4gdGhlIGxhc3RcclxuICByZXR1cm4gdGhpcy5kZWdyYWRlZFtsYXN0XTtcclxufVxyXG5cclxud2hpY2hQcm9ncmVzcyhwcm9ncmVzczogc3RyaW5nKXtcclxuICB0cnl7XHJcbiAgICByZXR1cm4gTWF0aC5yb3VuZCgrcHJvZ3Jlc3MgKiAxMDApIC8gMTAwO1xyXG4gIH1cclxuICBjYXRjaHtcclxuICAgIHJldHVybiBwcm9ncmVzcztcclxuICB9XHJcbn1cclxufSJdfQ==