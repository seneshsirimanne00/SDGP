(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/common'),exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('angular-progress-bar', ['@angular/core','@angular/common','exports', '@angular/core', '@angular/common'], factory) :
    (factory(global.ng.core,global.ng.common,(global['angular-progress-bar'] = {}),global.ng.core,global.ng.common));
}(this, (function (ɵngcc0,ɵngcc1,exports,core,common) { 
function ProgressBarComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.whichProgress(ctx_r0.progress), "% ");
} }
function ProgressBarComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.whichProgress(ctx_r1.progress), " ");
} }
'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProgressBarComponent = /** @class */ (function () {
        function ProgressBarComponent() {
            // Default color
            this.color = "#488aff";
            this.disabledP = false;
        }
        /**
         * Returns a color for a certain percent
         * @param percent The current progress
         */
        /**
         * Returns a color for a certain percent
         * @param {?} percent The current progress
         * @return {?}
         */
        ProgressBarComponent.prototype.whichColor = /**
         * Returns a color for a certain percent
         * @param {?} percent The current progress
         * @return {?}
         */
            function (percent) {
                var e_1, _a;
                // Get all entries index as an array
                /** @type {?} */
                var k = Object.keys(this.degraded);
                // Convert string to number
                k.forEach(function (e, i) { return k[i] = +e; });
                // Sort them by value
                k = k.sort(function (a, b) { return a - b; });
                // Percent as number
                /** @type {?} */
                var p = +percent;
                // Set last by default as the first occurrence
                /** @type {?} */
                var last = k[0];
                try {
                    // Foreach keys 
                    for (var k_1 = __values(k), k_1_1 = k_1.next(); !k_1_1.done; k_1_1 = k_1.next()) {
                        var val = k_1_1.value;
                        // if current val is < than percent
                        if (val < p) {
                            last = val;
                        }
                        // if val >= percent then the val that we could show has been reached
                        else if (val >= p - 1) {
                            return this.degraded[last];
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (k_1_1 && !k_1_1.done && (_a = k_1.return))
                            _a.call(k_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                // if its the last one return the last
                return this.degraded[last];
            };
        /**
         * @param {?} progress
         * @return {?}
         */
        ProgressBarComponent.prototype.whichProgress = /**
         * @param {?} progress
         * @return {?}
         */
            function (progress) {
                try {
                    return Math.round(+progress * 100) / 100;
                }
                catch (_a) {
                    return progress;
                }
            };
        /** @nocollapse */
        ProgressBarComponent.ctorParameters = function () { return []; };
        ProgressBarComponent.propDecorators = {
            progress: [{ type: core.Input, args: ['progress',] }],
            color: [{ type: core.Input, args: ['color',] }],
            degraded: [{ type: core.Input, args: ['color-degraded',] }],
            disabledP: [{ type: core.Input, args: ['disable-percentage',] }]
        };
ProgressBarComponent.ɵfac = function ProgressBarComponent_Factory(t) { return new (t || ProgressBarComponent)(); };
ProgressBarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ProgressBarComponent, selectors: [["progress-bar"]], inputs: { color: "color", disabledP: ["disable-percentage", "disabledP"], progress: "progress", degraded: ["color-degraded", "degraded"] }, decls: 4, vars: 6, consts: [[1, "progress-outer"], [1, "progress-inner"], [4, "ngIf"]], template: function ProgressBarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, ProgressBarComponent_ng_container_2_Template, 2, 1, "ng-container", 2);
        ɵngcc0.ɵɵtemplate(3, ProgressBarComponent_ng_container_3_Template, 2, 1, "ng-container", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("width", ctx.whichProgress(ctx.progress) + "%")("background-color", ctx.degraded == null ? ctx.color : ctx.whichColor(ctx.progress));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.disabledP);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.disabledP);
    } }, directives: [ɵngcc1.NgIf], styles: [".progress-outer[_ngcontent-%COMP%] {\n          width: 96%;\n          margin: 10px 2%;\n          padding: 3px;\n          background-color: #f4f4f4;\n          border: 1px solid #dcdcdc;\n          color: #fff;\n          border-radius: 20px;\n          text-align: center;\n        }\n        .progress-inner[_ngcontent-%COMP%] {\n          min-width: 15%;\n          min-height:18px;\n          white-space: nowrap;\n          overflow: hidden;\n          padding: 0px;\n          border-radius: 20px;"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProgressBarComponent, [{
        type: core.Component,
        args: [{
                selector: 'progress-bar',
                template: "\n  <div class=\"progress-outer\">\n    <div class=\"progress-inner\" [style.width]=\"whichProgress(progress) + '%'\" [style.background-color]=\"degraded == null ? color : whichColor(progress)\">\n      <ng-container *ngIf=\"!disabledP\"> \n        {{whichProgress(progress)}}%\n      </ng-container>\n      <ng-container *ngIf=\"disabledP\"> \n        {{whichProgress(progress)}}\n      </ng-container>\n    </div>\n  </div>\n  ",
                styles: ["\n        .progress-outer {\n          width: 96%;\n          margin: 10px 2%;\n          padding: 3px;\n          background-color: #f4f4f4;\n          border: 1px solid #dcdcdc;\n          color: #fff;\n          border-radius: 20px;\n          text-align: center;\n        }\n        .progress-inner {\n          min-width: 15%;\n          min-height:18px;\n          white-space: nowrap;\n          overflow: hidden;\n          padding: 0px;\n          border-radius: 20px;\n  "]
            }]
    }], function () { return []; }, { color: [{
            type: core.Input,
            args: ['color']
        }], disabledP: [{
            type: core.Input,
            args: ['disable-percentage']
        }], progress: [{
            type: core.Input,
            args: ['progress']
        }], degraded: [{
            type: core.Input,
            args: ['color-degraded']
        }] }); })();
        return ProgressBarComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProgressBarModule = /** @class */ (function () {
        function ProgressBarModule() {
        }
ProgressBarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ProgressBarModule });
ProgressBarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ProgressBarModule_Factory(t) { return new (t || ProgressBarModule)(); }, imports: [[
            common.CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ProgressBarModule, { declarations: [ProgressBarComponent], imports: [ɵngcc1.CommonModule], exports: [ProgressBarComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProgressBarModule, [{
        type: core.NgModule,
        args: [{
                imports: [
                    common.CommonModule
                ],
                declarations: [ProgressBarComponent],
                exports: [ProgressBarComponent],
                schemas: [core.CUSTOM_ELEMENTS_SCHEMA]
            }]
    }], function () { return []; }, null); })();
        return ProgressBarModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.ProgressBarComponent = ProgressBarComponent;
    exports.ProgressBarModule = ProgressBarModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,